import { $randomIndex } from './$randomIndex';

describe('$randomIndex()', () => {
  let randomSpy: jest.SpyInstance<number, []>;

  beforeEach(() => {
    randomSpy = jest.spyOn(Math, 'random').mockName('Math.random').mockReturnValue(0.5);
  });

  afterEach(() => {
    randomSpy.mockRestore();
  });

  it('should return a number generated by `Math.random()`', () => {
    const value = [4, 5, 6];
    const operator = {
      $randomIndex: {},
    };
    const num = $randomIndex({ value, operator });

    expect(randomSpy).toBeCalledTimes(1);
    expect(typeof num).toBe('number');
  });

  it('should return undefined if the value is not an array', () => {
    const value = { length: 45 };
    const operator = {
      $randomIndex: {},
    };
    const item = $randomIndex({ value, operator });

    expect(item).toBeUndefined();
  });

  it('should return undefined if the array is empty', () => {
    const value: any[] = [];
    const operator = {
      $randomIndex: {},
    };
    const item = $randomIndex({ value, operator });

    expect(item).toBeUndefined();
  });
});
